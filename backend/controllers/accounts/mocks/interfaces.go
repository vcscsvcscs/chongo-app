// Code generated by MockGen. DO NOT EDIT.
// Source: Accounts.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	model "github.com/vcscsvcscs/chongo-app/backend/controllers/accounts/model"
)

// MockUsersDB is a mock of UsersDB interface.
type MockUsersDB struct {
	ctrl     *gomock.Controller
	recorder *MockUsersDBMockRecorder
}

// MockUsersDBMockRecorder is the mock recorder for MockUsersDB.
type MockUsersDBMockRecorder struct {
	mock *MockUsersDB
}

// NewMockUsersDB creates a new mock instance.
func NewMockUsersDB(ctrl *gomock.Controller) *MockUsersDB {
	mock := &MockUsersDB{ctrl: ctrl}
	mock.recorder = &MockUsersDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersDB) EXPECT() *MockUsersDBMockRecorder {
	return m.recorder
}

// FindByEmail mocks base method.
func (m *MockUsersDB) FindByEmail(email string, user *model.User) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", email, user)
	ret0, _ := ret[0].(bool)
	return ret0
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUsersDBMockRecorder) FindByEmail(email, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUsersDB)(nil).FindByEmail), email, user)
}

// FindByUserName mocks base method.
func (m *MockUsersDB) FindByUserName(userName string, user *model.User) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserName", userName, user)
	ret0, _ := ret[0].(bool)
	return ret0
}

// FindByUserName indicates an expected call of FindByUserName.
func (mr *MockUsersDBMockRecorder) FindByUserName(userName, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserName", reflect.TypeOf((*MockUsersDB)(nil).FindByUserName), userName, user)
}

// Insert mocks base method.
func (m *MockUsersDB) Insert(user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockUsersDBMockRecorder) Insert(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUsersDB)(nil).Insert), user)
}

// RemoveAll mocks base method.
func (m *MockUsersDB) RemoveAll(duration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll.
func (mr *MockUsersDBMockRecorder) RemoveAll(duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockUsersDB)(nil).RemoveAll), duration)
}

// Update mocks base method.
func (m *MockUsersDB) Update(userName string, t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userName, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUsersDBMockRecorder) Update(userName, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUsersDB)(nil).Update), userName, t)
}
