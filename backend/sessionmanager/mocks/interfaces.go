// Code generated by MockGen. DO NOT EDIT.
// Source: Sessionmanager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	model "github.com/vcscsvcscs/chongo-app/backend/sessionmanager/model"
	mgo "gopkg.in/mgo.v2"
)

// MockSessionsDB is a mock of SessionsDB interface.
type MockSessionsDB struct {
	ctrl     *gomock.Controller
	recorder *MockSessionsDBMockRecorder
}

// MockSessionsDBMockRecorder is the mock recorder for MockSessionsDB.
type MockSessionsDBMockRecorder struct {
	mock *MockSessionsDB
}

// NewMockSessionsDB creates a new mock instance.
func NewMockSessionsDB(ctrl *gomock.Controller) *MockSessionsDB {
	mock := &MockSessionsDB{ctrl: ctrl}
	mock.recorder = &MockSessionsDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionsDB) EXPECT() *MockSessionsDBMockRecorder {
	return m.recorder
}

// FindByTimeAccessed mocks base method.
func (m *MockSessionsDB) FindByTimeAccessed(duration time.Duration) *mgo.Iter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTimeAccessed", duration)
	ret0, _ := ret[0].(*mgo.Iter)
	return ret0
}

// FindByTimeAccessed indicates an expected call of FindByTimeAccessed.
func (mr *MockSessionsDBMockRecorder) FindByTimeAccessed(duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTimeAccessed", reflect.TypeOf((*MockSessionsDB)(nil).FindByTimeAccessed), duration)
}

// FindByToken mocks base method.
func (m *MockSessionsDB) FindByToken(token string, profile *model.Token) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByToken", token, profile)
	ret0, _ := ret[0].(bool)
	return ret0
}

// FindByToken indicates an expected call of FindByToken.
func (mr *MockSessionsDBMockRecorder) FindByToken(token, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByToken", reflect.TypeOf((*MockSessionsDB)(nil).FindByToken), token, profile)
}

// Insert mocks base method.
func (m *MockSessionsDB) Insert(token, userName string, t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", token, userName, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockSessionsDBMockRecorder) Insert(token, userName, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSessionsDB)(nil).Insert), token, userName, t)
}

// Remove mocks base method.
func (m *MockSessionsDB) Remove(token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockSessionsDBMockRecorder) Remove(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockSessionsDB)(nil).Remove), token)
}

// RemoveAll mocks base method.
func (m *MockSessionsDB) RemoveAll(duration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll.
func (mr *MockSessionsDBMockRecorder) RemoveAll(duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockSessionsDB)(nil).RemoveAll), duration)
}

// Update mocks base method.
func (m *MockSessionsDB) Update(token string, t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", token, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSessionsDBMockRecorder) Update(token, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSessionsDB)(nil).Update), token, t)
}
